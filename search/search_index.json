{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":""},{"location":"#description-of-nikolass-tech-writing-assignment","title":"Description of Nikolas's Tech Writing Assignment","text":"<p>The task; <code>create user guides for MTG's products</code> </p> <ul> <li>MTG Secure Boot Protector </li> <li>MTG Secure Boot Protector interoperability with MTG KMS and MTG PKI.</li> </ul>"},{"location":"SB-embedded-intro/","title":"Secure Boot for embedded systems","text":"<p>Secure boot is a critical security mechanism designed to protect embedded systems against various threats, such as physical memory modification and malicious code injection.</p> <p>When you power on an embedded device, it initiates a boot process. This process involves the execution of boot code stored on the device\u2019s chip, and in some cases, it simultaneously launches additional code and applications. Once the boot process concludes, the device becomes operational.</p> <p>However, when Secure Boot is in place, code doesn\u2019t run simply because it resides on the device. Secure Boot\u2019s primary function is to ensure that only code signed by the device\u2019s manufacturer is executed.</p> <p>Once the secure code begins execution, any additional code and applications will only run if their signature is valid. This creates a hierarchical \u201cchain of trust\u201d where each layer of code and application is executed only if the correct key validates it.</p> <pre><code>flowchart TD\n    A(RESET) --&gt; B{i.MX Boot ROM Code}\n    subgraph B[i.MX Boot ROM Code]\n        F1[HAB Library]\n    end\n    B --&gt; C{Is Signed U-Boot Valid?}\n    B -- Loaded By --&gt; K[\"Signed U-boot (U-Boot + CSF)\"]\n    C -- No --&gt; D[STOP Execution]\n    C -- Yes --&gt; E[Signed U-Boot]\n    subgraph E[Signed U-Boot]\n        F2[Calls Into HAB Library]\n    end\n    E -- Loaded By --&gt; L[\"Signed OS (OS+CSF)\"]\n    E --&gt; F{Calls i.MX HAB Library}\n    F --&gt; G[Loads Signed OS]\n    G --&gt; H{Is Signed OS Valid?}\n    H -- No --&gt; D[STOP Execution]\n    H -- Yes --&gt; I[Execute Signed OS]</code></pre> <p> </p>"},{"location":"bonus/","title":"MTG KMS &amp; PKI Ecosystem","text":"<p>When referring to MTG Secure Boot Protector as a whole, following visualization should help clear misconceptions about the nature and function of it;</p> <p></p> <p>MTG Secure Boot serves as a bundle of MTG's secure Client, interfacing securely with the wider MTG IoT Key Management System.</p> <p> The MTG IoT KMS offers unparalleled interoperability with not only MTG'S Public Key Infrastructure but also third party, already existing ones. The open interface, developed according to the international OASIS KMIP standard, allows the MTG KMS to connect seamlessly between all specific IOT applications. From secure key handling (HSM backend) to Role based access rights, while simultaneously offering production &amp; testing keys for different types of users, the options are virtually unlimited. The already present Public Key Infrastructure integration means that keys can be generated on the fly, but there is also the option of using PKIs already in place and set up (interfacing it with the Secure Boot Protector). Automatic signature generation during building is possible through the dedicated CLI build system integration. On top of that, for production releases where automatically generated signatures may not be an option due to security concerns, the process can be completed manually. </p> <p></p> <p>The following key functions of the MTG IoT KMS are the essence of the easy integration mentioned above;</p> <ul> <li>Complete key management life cycle</li> <li>Control &amp; Compliance</li> <li>KMIP Interface</li> <li>KMIP Client Library</li> <li>REST Interface &amp; Adapters</li> <li>Vendor independent HSM</li> <li>PKI Integration</li> <li>Consulting &amp; Support</li> </ul> <p>For a more detailed overview, please refer to this flyer.</p>"},{"location":"content-tabs/","title":"Content tabs","text":""},{"location":"content-tabs/#content-tabs","title":"Content Tabs","text":"<p>This is some examples of content tabs.</p>"},{"location":"content-tabs/#generic-content","title":"Generic Content","text":"Plain textUnordered listOrdered list <p>This is some plain text</p> <ul> <li>First item</li> <li>Second item</li> <li>Third item</li> </ul> <ol> <li>First item</li> <li>Second item</li> <li>Third item</li> </ol>"},{"location":"user-guide/","title":"MTG Secure Boot Protector : Introduction &amp; User Guide","text":"<p>Manufacturers of embedded systems should ensure that their devices only start with original and unmodified firmware and that only authorized configuration files and updates can be used. The original software may run on counterfeit hardware or, vice versa, counterfeit or manipulated software may run on the original hardware.</p> <p>Conventional tools that are typically shipped for/with embedded systems, do not typically address the secure handling of keys used for signing the respective software. During the development lifecycle you need to apply the signatures on different SW Components (add sw components here).</p> <p>MTG Secure Boot Protector offers a solution behind the tools provided by chip vendors, interfacing them using proprietary interfaces, enabling the secure life cycle management of digital certificates and secret keys needed for the secure boot management process. The securely stored and newly generated keys are then used for the application of the firmware signatures.</p> <p>It is responsible for all crypto operations (encryption, signing, key generation\u2026), which are needed for secure boot, configuration and update of embedded systems. It covers all needed elements to fully protect the firmware:</p> <ul> <li>Boot Process</li> <li>Update Process</li> <li>Protection of secret keys</li> <li>Protection of bootloader and operating system</li> <li>Encryption of the executed code (e.g., bootloader or Linux Kernel)</li> </ul> <p> A complete user guide for the SBP UI tool can be found here.</p>"}]}